# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CMDP
                                 A QGIS plugin
 QGIS plugin for importing and analysing CAMS (Copernicus Atmosphere Monitoring Service) data. 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-09
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Polimi
        email                : nshwan.khairalla@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from cdsapi import Client as cdsapi_Client # For connecting to the CAMS website
import os
import logging
from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt import uic, QtWidgets, QtCore
from PyQt5.QtWidgets import QDialog
from qgis.utils import iface # This is used by QGIS
from qgis.PyQt.QtCore import QSettings  # For displaying error messages
from qgis.core import QgsProject # To work with QGIS Projects
from PyQt5.QtWidgets import QMessageBox # For showing messages to the user
from PyQt5.QtWidgets import QProgressBar  # Import QProgressBar To show a progress bar
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QDialog
from PyQt5 import QtWidgets

# Configure logging
log_file_path = os.path.join(os.path.expanduser('~'), 'cmdp_plugin.log')
logging.basicConfig(filename=log_file_path, level=logging.DEBUG, format='%(asctime)s %(levelname)s:%(message)s')


# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .CMDP_dialog import CMDPDialog
import os.path


class CMDP:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.cams_client = None  # Ensure cams_client is initialized

        logging.info("Initializing CMDP plugin")

        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        self.dlg = None
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(self.plugin_dir, "i18n", "CMDP_{}.qm".format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&CMDP")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("CMDP", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/CMDP/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("CMDP"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def run(self):
        """Run method that performs all the real work."""
        # Initialize the dialog if it hasn't been created or is not currently visible
        if self.dlg is None or not self.dlg.isVisible():
            self.dlg = CMDPDialog(self.iface, self)  # Pass 'self' to maintain a reference to the main plugin class

        # Show the dialog window
        self.dlg.show()

        # Execute the dialog window and wait for it to close
        if self.dlg.exec_():
            # If the dialog was accepted, proceed with input validation

            # Validate user inputs
            if not self.validateUserInputs():
                # If user input validation fails, exit the method
                return

            # Construct request parameters based on user inputs
            # ... (additional code to construct request parameters and handle the data)



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI and cleans up resources."""
        # Clean up actions and UI elements
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&CMDP"), action)
            self.iface.removeToolBarIcon(action)

        # Call the unload method of the dialog to clean up dialog-specific resources
        if self.dlg:
            self.dlg.unload()

    